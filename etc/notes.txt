== dev ==

* Setup GitHub Pages "gh-pages" branch and "master" branch as subfolders of a parent project folder ("grandmaster")
-> https://gist.github.com/833223

== twitterboostrap renderer ==

* focus : first form element ([autofocus] || [tabIndex!="-1"]):visible in rendered templated will be focused

* ng-ampere-transition : attribute ng-ampere-hotkey is taken in account for applying hotkeys

* attribute ng-ampere-hotkey : Alt+Shift+N works whereas Shift+Alt+N

'ampere.ui.layout' : url to layout template or null/false/undefined for no layout. if not set default layout will be used
'ampere.ui.view'   : url to default view template. if not set default view will be used

available rootScope services :
$scope.$ = jQuery
$scope.$window = $window;
$scope.$http = $http;
$scope.$timeout = $timeout;
$scope.$log = $log;
$scope.$resource = $resource;
$scope.$cookies = $cookies;

"batteries included"
"AngularJS on stereoids"
"Create single page web apps with state"
"Einfach zauberhaft"
"Wunderbar"
"the Egg Laying Woolmilkpig"


'ampere.ui.type' = 'global' || 'breadcrumb' || 'primary' || 'secondary' || undefined
transition.enabled( value || function)
* option 'ampere.ui.about.url' can now also be a module transition (see multiview example

* option 'ampere.history.html5' added to support html5 history navigation
(automatically set to true if a module is instantated on a BODY element and the browser supports this feature)

* twitterboostrap renderer : automatic html5 drag-to-desktop ability for anchors having the droppable attribute set.

* <a type="file" ng-ampere-transition=""></a> supported
* directive ng-ampere-data :
** attention - do not use in consumption with data- attributes ( they will get lost)
** expected value is an object which will be merged (by reference, not by copy) into the current data object

* transition : if state===target caption/icon/description from state/target will be ignored

* transaction.active( function/boolean) can be used to signal that this transition was the last "active" one
(will be highlighted in the ui layouts according to their state)

* window.ov.ampere.type( obj) : returns the ampere type ('ampere'/'state'/'transition'/'view'/'module') or $.type result if no ampere type
** type filter returns result of window.ov.ampere.type

* flash API

* templates can now be provided as jquery script elements referenced by id

* behaviour changed : window.ampere( name, options) || window.ampere( name) || window.ampere( options) returns a the instance if available
* filter "strip_tags" added
* ng-ampere-transition : attribute "ng-ampere-icon" added to support overwriting default transition icons

* directive "ng-ampere-watch" : can take a function argument or an object. examples
examples:
	ng-ampere-watch="onChanged"
	ng-ampere-watch="{ 'item.name' : updateName}"
	ng-ampere-watch="{ 'item.name, item.familyname' : updateWholeName}"
	ng-ampere-watch="{ 'item.name, item.familyname' : updateWholeName, 'item.email' : updateEmail, 'item.zipcode,*' : othersUpdated}"
	the called function this is the scope
	1st argument always state
	in case of a an property watch (i.e. not '*' !) there are 3 other arguments property, oldValue, newValue
	!attention! modifications should always be done on the scope !!!!!

* inline-help / help-block support for .invalid/:invalid form controls

* entity && entity.projection api examples

* "ampere.ui.angular" interface / Ampere class "Component" example

* directive "ng-ampere-template" example

* ng-ampere-crud-list

* PERFORMANCE HINT !! transition action : if a transition returns
- (refresh) command == true forces a full template update
- (lightweight refresh) command == false reevaluates based on the current dom structure

* ng-ampere-transiton directive : transition option "ampere-ui-input-type" is recognized to support type transportation via transition option
(needed for crud table with custom file upload "edit" transition)

* html5 validation plugin added (dont forget the "html5validation-title" class)

* ng-ampere-validate directive added

* entity lambda support added : window.ov.entity.lambda, window.ov.entity.select, window.ov.entity.where 

* ampere-crud-paginator added

* ampere behaviour enhanced : if a transition returned a deferred which gets rejected without arguments
it will be assumed that the transition was just canceled (ie. no error will be displayed, instead - the display will be refreshed) 

* ui.update added (triggering angular digest). this is very useful if you do "things" not visible to angular (asnyc operations via deferreds for example) and want to tell angular that bound data was touched.

* directive ng-ampere-sortable can now also take a plain callback function instead of a transition

* table crud : draggable transition : the event transports oldPosition and newPosition in its data property
event.data.oldPosition = oldPosition;
event.data.newPosition = newPosition;

* directive ng-ampere-sortable : flickering removed when sortable.stop was called 

* Ampere module : jquery api compatible event handling support added via module instance methods :
** on( eventName, ...)
** once( eventName, ...), 
** off( eventName, [handler])
* module event "ampere.transition-enabled" added to supported global event handlers.
this event gets triggered whenever transition.enabled() gets called. if a event handler returns false, the enabled function of the transition immediately returns false  (a perfect use case is a global permission event handler function where you encapsulate permission checks for a transition instead of doiing this task in every transition individually). 

* Twitter Bootstrap Renderer : method "refresh" added. refresh rerenders the whole state (whereas method "update" just forces angular scope.$digest)

* crud list : beside the regular list.selection() function you can access the current (dirty) selection by list.selection.value. this feature is introduced to match the use case you want to know what was recently selected but is now dirty (in this case selection() would return undefined ...)

* module event "ampere.view-changed" added to supported global event handlers. 
this event gets triggered immediately after a new view was rendered (typically after stepping from one state to another) 

* ui.update() triggers "ampere.view-updated" 

* ui.refresh() triggers "ampere.view-refreshed"

* twitter bootstrap renderer : global $ampere object is hosting also the state's scope via "$ampere.scope" (there exist some rare cases where you want to access the scope acting as state pendant directly).

* crud table : double click on a header with a configured orderby will remove the orderby condition (->makes the table unordered aka items follow their natural order)

* event arguments:
** "ampere.view-changed" single argument containing previously active view or undefined when module was just started
** "ampere.view-updated" no arguments
** "ampere.view-refreshed" no arguments
** "ampere.transition-enabled" single argument. the transition to approve to be enabled

* crud table : new option "list-item-dblclick" added. this option can be overridden to control the dblclick behaviour of a data row. by default the edit action is executed. you can override it global

window.ov.ampere.crud.list.DEFAULTS[ 'list-item-dblclick'] = (function( orig) {
	return function() {
			// return details transition if available
		return (this.selection() && this.state().transitions.details) || orig.apply( this);
	}
})( window.ov.ampere.crud.list.DEFAULTS[ 'list-item-dblclick']);

or for a concrete table instance 

...
state.list.options()['list-item-dblclick'] = (function( orig) {
	return function() {
			// return details transition if available
		return (this.selection() && this.state().transitions.details) || orig.apply( this);
	}
})( state.list.options()[ 'list-item-dblclick']);
...

* glow css class added to support animated glowing of transition DOM elements (like "update")

* crud table : 
** remove action : option "confirm.message" can now also be a function (this===list instance) 
** addable/removeable/editable transitions "redo.message", "undo.message" can now also be a function (this===list instance) 

* crud table, crud paginator : both directives will write property "element" to its models containing a query instance pointing to the real html view

* crud paginator : overall setter/getter "enabled" taking a function as argument or returning the current enabled getter function added. the given enabled function gets a paginator transition as argument returning if this transition is enabled or not when called. this context is the paginator.
example usage : 
...
paginator.enabled( function( transition) {
	return !state.list.getEditingContext();
});
...

* state option "ampere.history.html5.route" added. 

function value is expected to return the hash to append to the current document location. "this" context is the state.if function is called with an argument (a hash string) its expected to return either a function proceeding to the given state and data or false/undefined/null for signalling that this state is not responsible to handle this hash.

...
state.option({ 'ampere.history.html5.route' : function( hash) {
		if( arguments.length) {
				// return function to proceed to state if has matches #person/<id>
			var matches = hash.match( /^person(\/(\d+))?$/);
			return matches && (function( id) {
				return function() {
						// this context is the ampere controller
					return this.proceed( m.transitions.oem_list);
				};
			})( matches[2]);
		} else {
				// return hash
			return "person/" + state.item.id;
		}
	}
});

* state option "ampere.history.html5.title" added

this option is taken into account when option "ampere.history.html5" is enabled. it gives you the option to set a custom document.title used when a browser bookmark is added.
option "ampere.history.html5.title" can be used to override the default default.document title computed using he current state's 'ampere.ui.caption' option.
option value is expected to contain a string or function <string>function() (this context is the state) returning the current document title. if not given the default behaviour (-> current state's 'ampere.ui.caption' option) will be used.

* the ampere controller is now a deferred reflecting the ready state of the ampere widget instance (created with $.ampere( ...)). this context ist the ampere controller.

example use
$( 'body').ampere()
.done( function( module) {
	// do something when ampere widget instance is ready			
})

* module option 'ampere.history.html5.deeplinking' added. 

deeplinking option (default is enabled). if ampere.history.html5 is true
and the ampere widget element === document.body this function will be called at
startup to resolve a state responsible for handling the hash fragment of 
document.location (via state option 'ampere.history.html5').

this option can be overridden with a custom function. 
this context is the ampere controller. the given function may return
a deferred tracking its progress.

* module event 'ampere.transition' gets triggered whenever a transition is about to be executed.

the event handler arguments are ( event, transitionDeferred, action, source, target, view). transitionDeferred transports a deferred reflecting the state of the transition execution. 
the transitionDeferred handler context is the module. in case the transition succeeds the success handler argument is the previous view. the error handler arguments are the error arguments (xhr, throwable, whatever)

* controller.proceed( transition) now returns a deferred tracking the completeness of the state/view switching whenever a transition gets executed.  

* crud table : all hotkey functions (up/down/home/end) are now true transitions. selection is now also backed by a true transition. all crud table transitions are now accessible by associative array table.transitions

* crud table : option "list-select-as-transition" can be set to true or a function (returning the option value) to configure if select operations (up/down/home/end and mouse click on a row) should be executed as transition.

* twitter bootstrap theme  : class "jiggle" can be applied to transition buttons/anchors to have the jiggle animation applied. animation gets only in action when the transition is enabled.

* twitter bootstrap theme : new transition option "ampere.ui.class" added. Using this option you can apply css classes in an abstract way to the rendered transition representation. if value is a function it is called with this=transition and first argument=transition

* twitter bootstrap theme  : class "auto" can be applied to dropdowns appearing automagically on mouse over
- remove data-toggle="dropdown" from the LI child to disable toggle by mouse click
- edit element LI.dropdown and add class "auto" 

* new ui options for default and wizard template : 
- ampere.ui.global.prepend (prepends before the global action bar)
- ampere.ui.global.append (prepends before the global action bar)
- ampere.ui.brand.append (appends after the brand element)
- ampere.ui.brand.prepend (prepends before the brand element)
- ampere.ui.primary.prepend (prepends brefore the primary actions bar)
- ampere.ui.primary.append (appends after the primary actions bar)

using these options you can inject custom angular spiced html snippets into the default and wizard tenmplate of ampere. the value can be either a template, function returning the template, jquery collection containing the template or dom element. the options are taken from the state or module (in that order).

* twitter bootstrap renderer : angular filter "first" and "last" added

* event driven angular directives now support not only taking an transition argument but also an plain object
transporting the transition in property "transition" and transition arguments in property "arguments". supported directives :
- ng-ampere-transition
- ng-ampere-change
- ng-ampere-click
- ng-ampere-mousedown
- ng-ampere-mouseup
- ng-ampere-dblclick
- ng-ampere-drop
- ng-ampere-sortable

example use : 
<button ng-ampere-transition="{ transition : $ampere.view.state().transitions.foo, arguments : [ 'me', 'too']}"

state.transition( 'foo')
.action( function( transition, ui, data) {
	var event = data[0],
		arguments = data.slice( 1); // will be [ 'me', 'too']
});

* general purpose css class "truncate" added. applying this class to elements will make overflowing text appear with appended ellipsis ('...')

* directive ng-ampere-debounce added. this directive allows debouncing/throttling of any kind of events and (as a result of that) also ng-model updates. you can use it also for regular ng-[event] and non angular [event] throttling/debouncing

example usage : 

<input type="text" ng-model="mymodel" ng-ampere-debounce> 
		will debounce updating mymodel with 1000ms delay

<input type="text" ng-model="mymodel" ng-ampere-debounce="leading"> 
		will updating mymodel initial but suppress all further updates within 1000ms delay 

<input type="text" ng-model="mymodel" ng-ampere-debounce="{ timeout : 500}"> 
		will debounce updating mymodel with 500ms delay
		
<input type="text" ng-model="mymodel" ng-ampere-debounce="{ leading : true }"> 
		will updating mymodel initial but suppress all further updates within 1000ms delay
		
<input type="text" ng-model="mymodel" ng-ampere-debounce="{ timeout  : 500, leading : true }"> 
		will updating mymodel initial but suppress all further updates within 500ms delay

<input type="checkbox" ng-change="myhandler" ng-ampere-debounce="{ timeout  : 500, leading : true }"> 
		will call myhandler on first change event but suppress all further change event within 500ms delay

* lodash 1.3.1 added

* directive ng-ampere-dataset added. this directive allows one-directional binding of an object to the DOM elements dataset property (useful for Holder.js support) 

* directive ng-ampere-event : using this directive you can listen to any event (including namespaced jquery  events)

example usage listenting to boostrap 2.3.2 carousel : 
	<div id="myCarousel" class="carousel slide" data-interval="false" ng-ampere-event="{ event : 'slid', transition : mySlidEventHandler}">
	...
	</div>

	state.mySlidHandler = function( transition, ui, data) {
		var event = data[0];
	}

same example as above with additional arguments : 
	<div id="myCarousel" class="carousel slide" data-interval="false" ng-ampere-event="{ event : 'slid', transition : mySlidEventHandler, arguments : [ foo, 'bar']}">
	...
	</div>

	state.mySlidHandler = function( transition, ui, data) {
		var event = data[0],	// = the event
			arg0  = data[1],	// = value of state.foo
			arg1  = data[2];	// = 'bar'
	}

* directive ng-ampere-link : using this directive you can easily use/initialize any jquery/jquery ui plugin, twitter bootstrap control or anything else you want to use. writing custom directives for special controls like the twitter boostrap is just writing unneeded boilerplate code.

$element provides access to the current wrapped DOM element (aka jquery collection if you use jquery). this directive doesnt watch changes of the provided value (which would be nonsense because control will be initialized once). 

example usage : 
	<div 
		id="thumbnailCarousel" 
		ng-ampere-link="$element.carousel({ 
			interval : false
		})" 
		class="carousel slide"
	>
	...

same but in combination wit directive ng-ampere-event : 
	<div 
		id="thumbnailCarousel" 
		ng-ampere-link="$element.carousel({ 
			interval : false
		})" 
		class="carousel slide"		
		ng-ampere-event="[
			{ event : 'slide', transition : onSlidingStart},
			{ event : 'slid', transition : onSlidingDone}
		]"
	>
	...

* css class "filter-empty" supports highlighting of an active filter. can only be applied to INPUT.search-query elements (see shop-admin example)

* angular filter "map" (:property?:default?) added : map can map a property of the right side array items to a object from another array.
the map filter can take 2 arguments. 1st argument is expected to be the property to return from the item. 
2nd argument can be a default value return in case the given item doesnt have the property.
if no default argument is given items doesnt having the property will be filtered out.

example usage:
data = [ { id : 0, category : 'a'}, { id : 0, name : 'b'}];
...
<div ng-repeat="c in data | map:'category'">{{c}}</div>
-> <div>a</div>
   <div>b</div>

more complex example:
categories  = [ { id : 'a', caption : 'Alpha'}, { id : 'b', caption : 'Beta'}];
data 		= [ { id : 0, category : 'a'}, { id : 0, name : 'b'}];
...
<div ng-repeat="category in categories | find( data | map:'category')">{{category.caption}}</div>
-> <div>Alpha</div>
   <div>Beta</div>
