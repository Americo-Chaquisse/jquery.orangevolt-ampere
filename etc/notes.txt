== dev ==

* Setup GitHub Pages "gh-pages" branch and "master" branch as subfolders of a parent project folder ("grandmaster")
-> https://gist.github.com/833223

* http://www.jointjs.com/tutorial.html

== twitterboostrap renderer ==

* focus : first form element ([autofocus] || [tabIndex!="-1"]):visible in rendered templated will be focused

* ng-ampere-transition : attribute ng-ampere-hotkey is taken in account for applying hotkeys

* attribute ng-ampere-hotkey : Alt+Shift+N works whereas Shift+Alt+N

'ampere.ui.layout' : url to layout template or null/false/undefined for no layout. if not set default layout will be used
'ampere.ui.view'   : url to default view template. if not set default view will be used

available rootScope services :
$scope.$ = jQuery
$scope.$window = $window;
$scope.$http = $http;
$scope.$timeout = $timeout;
$scope.$log = $log;
$scope.$resource = $resource;
$scope.$cookies = $cookies;

"batteries included"
"AngularJS on stereoids"
"Create single page web apps with state"
"Einfach zauberhaft"
"Wunderbar"
"the Egg Laying Woolmilkpig"


'ampere.ui.type' = 'global' || 'breadcrumb' || 'primary' || 'secondary' || undefined
transition.enabled( value || function)
* option 'ampere.ui.about.url' can now also be a module transition (see multiview example

* option 'ampere.history.html5' added to support html5 history navigation
(automatically set to true if a module is instantated on a BODY element and the browser supports this feature)

* twitterboostrap renderer : automatic html5 drag-to-desktop ability for anchors having the droppable attribute set.

* <a type="file" ng-ampere-transition=""></a> supported
* directive ng-ampere-data :
** attention - do not use in consumption with data- attributes ( they will get lost)
** expected value is an object which will be merged (by reference, not by copy) into the current data object

* transition : if state===target caption/icon/description from state/target will be ignored

* transaction.active( function/boolean) can be used to signal that this transition was the last "active" one
(will be highlighted in the ui layouts according to their state)

* window.ov.ampere.type( obj) : returns the ampere type ('ampere'/'state'/'transition'/'view'/'module') or $.type result if no ampere type
** type filter returns result of window.ov.ampere.type

* flash API

* templates can now be provided as jquery script elements referenced by id

* behaviour changed : window.ampere( name, options) || window.ampere( name) || window.ampere( options) returns a the instance if available
* filter "strip_tags" added
* ng-ampere-transition : attribute "ng-ampere-icon" added to support overwriting default transition icons

* directive "ng-ampere-watch" : can take a function argument or an object. examples
examples:
	ng-ampere-watch="onChanged"
	ng-ampere-watch="{ 'item.name' : updateName}"
	ng-ampere-watch="{ 'item.name, item.familyname' : updateWholeName}"
	ng-ampere-watch="{ 'item.name, item.familyname' : updateWholeName, 'item.email' : updateEmail, 'item.zipcode,*' : othersUpdated}"
	the called function this is the scope
	1st argument always state
	in case of a an property watch (i.e. not '*' !) there are 3 other arguments property, oldValue, newValue
	!attention! modifications should always be done on the scope !!!!!

* inline-help / help-block support for .invalid/:invalid form controls

* entity && entity.projection api examples

* "ampere.ui.angular" interface / Ampere class "Component" example

* directive "ng-ampere-template" example

* ng-ampere-crud-list

* PERFORMANCE HINT !! transition action : if a transition returns
- (refresh) command == true forces a full template update
- (lightweight refresh) command == false reevaluates based on the current dom structure

* ng-ampere-transiton directive : transition option "ampere-ui-input-type" is recognized to support type transportation via transition option
(needed for crud table with custom file upload "edit" transition)

* html5 validation plugin added (dont forget the "html5validation-title" class)

* ng-ampere-validate directive added

* entity lambda support added : window.ov.entity.lambda, window.ov.entity.select, window.ov.entity.where 

* ampere-crud-paginator added

* ampere behaviour enhanced : if a transition returned a deferred which gets rejected without arguments
it will be assumed that the transition was just canceled (ie. no error will be displayed, instead - the display will be refreshed) 

* ui.update added (triggering angular digest). this is very useful if you do "things" not visible to angular (asnyc operations via deferreds for example) and want to tell angular that bound data was touched.

* directive ng-ampere-sortable can now also take a plain callback function instead of a transition

* table crud : draggable transition : the event transports oldPosition and newPosition in its data property
event.data.oldPosition = oldPosition;
event.data.newPosition = newPosition;

* directive ng-ampere-sortable : flickering removed when sortable.stop was called 

* Ampere module : jquery api compatible event handling support added via module instance methods :
** on( eventName, ...)
** once( eventName, ...), 
** off( eventName, [handler])
* module event "ampere.transition.enabled" added to supported global event handlers.
this event gets triggered whenever transition.enabled() gets called. if a event handler returns false, the enabled function of the transition immediately returns false  (a perfect use case is a global permission event handler function where you encapsulate permission checks for a transition instead of doiing this task in every transition individually). 

* Twitter Bootstrap Renderer : method "refresh" added. refresh rerenders the whole state (whereas method "update" just forces angular scope.$digest)

* crud list : beside the regular list.selection() function you can access the current (dirty) selection by list.selection.value. this feature is introduced to match the use case you want to know what was recently selected but is now dirty (in this case selection() would return undefined ...)

* module event "ampere.view.changed" added to supported global event handlers. 
this event gets triggered immediately after a new view was rendered (typically after stepping from one state to another) 

* ui.update() triggers "ampere.view.updated" 

* ui.refresh() triggers "ampere.view.refreshed"

* twitter bootstrap renderer : global $ampere object is hosting also the state's scope via "$ampere.scope" (there exist some rare cases where you want to access the scope acting as state pendant directly).

* crud table : double click on a header with a configured orderby will remove the orderby condition (->makes the table unordered aka items follow their natural order)

* event arguments:
** "ampere.view.changed" single argument containing previously active view or undefined when module was just started
** "ampere.view.updated" no arguments
** "ampere.view.refreshed" no arguments
** "ampere.transition.enabled" single argument. the transition to approve to be enabled

* crud table : new option "list-item-dblclick" added. this option can be overridden to control the dblclick behaviour of a data row. by default the edit action is executed. you can override it global

window.ov.ampere.crud.list.DEFAULTS[ 'list-item-dblclick'] = (function( orig) {
	return function() {
			// return details transition if available
		return (this.selection() && this.state().transitions.details) || orig.apply( this);
	}
})( window.ov.ampere.crud.list.DEFAULTS[ 'list-item-dblclick']);

or for a concrete table instance 

...
state.list.options()['list-item-dblclick'] = (function( orig) {
	return function() {
			// return details transition if available
		return (this.selection() && this.state().transitions.details) || orig.apply( this);
	}
})( state.list.options()[ 'list-item-dblclick']);
...

* glow css class added to support animated glowing of transition DOM elements (like "update")
